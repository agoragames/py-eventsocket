#!/usr/bin/env python

import signal
import time
import sys
import os
import socket
sys.path.append( os.path.abspath('.') )
sys.path.append( os.path.abspath('..') )

from eventsocket import EventSocket,event
from optparse import OptionParser

class Client(object):
  '''
  Represents a proxy connection.
  '''
  
  def __init__(self, sock, host, port):
    '''
    Initialize with the socket of the incoming connection.
    '''
    global parser
    self._incoming = sock
    self._incoming.read_cb = self._incoming_read
    self._incoming.close_cb = self._incoming_close
    self._outgoing = EventSocket( read_cb=self._outgoing_read, close_cb=self._outgoing_close )
    self._outgoing.setblocking( False )
    self._outgoing.connect( (host,port) )

  def _outgoing_close(self, sock):
    if not self._incoming.closed:
      self._incoming.close()

  def _incoming_close(self, sock):
    if not self._outgoing.closed:
      self._outgoing.close()

  def _outgoing_read(self, sock):
    if not self._incoming.closed:
      self._incoming.write( sock.read() )

  def _incoming_read(self, sock):
    if not self._outgoing.closed:
      self._outgoing.write( sock.read() )

def sigint_cb(*args):
  event.abort()

def accept_cb(client_sock):
  global clients, options
  clients.add( Client(client_sock, options.host, options.port) )

clients = set()
parser = OptionParser(
  usage='Usage: client [options]'
)
parser.add_option('--host', default='localhost', type='string')
parser.add_option('--port', default=80, type='int')
parser.add_option('--listen-port', default=8080, type='int')
parser.add_option('--clients', default=10, type='int')

(options,args) = parser.parse_args()

# TODO: add error handlers 
listener = EventSocket( accept_cb=accept_cb )
listener.setblocking( False )
listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
listener.bind( ('',options.listen_port) )
listener.listen(100)


event.signal( signal.SIGINT, sigint_cb )

start = time.time()
event.dispatch()
end = time.time()

#total = sum( [client._bytes_read for client in clients] )

#print 'read %d bytes'%(total)
#print "read %.06f bytes/sec"%( total / (end-start) )
